#!/usr/bin/env python3
"""
Enhanced Test Script for the English Programming Project
Tests the extended capabilities of the ImprovedNLPCompiler
"""
import sys
import os

# Add the project root to the path
engprg_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if engprg_path not in sys.path:
    sys.path.insert(0, engprg_path)

# Try to import our improved compiler first
try:
    from english_programming.src.compiler.improved_nlp_compiler import ImprovedNLPCompiler as Compiler
    print("Using ImprovedNLPCompiler with enhanced capabilities")
except ImportError:
    from english_programming.src.compiler.nlp_enhanced_compiler import NLPEnhancedCompiler as Compiler
    print("Using original NLPEnhancedCompiler (fallback)")

from english_programming.src.vm.enhanced_nlvm import EnhancedNLVM

# Define a comprehensive test program with various natural language patterns
test_program = """
# Test enhanced NLP capabilities

# Variable assignment
Create a variable total with value 100
Set result to 25
Print result

# String operations
Set name to "John Doe"
Set greeting to "Hello, "
Concatenate greeting and name to make full_greeting
Print full_greeting

# String literals in print statements
Print 'This is a direct string literal'

# Another way to print string literals
'This should also work as a print statement' should be printed

# Counter operations - different styles
Create a counter with initial value 1
Print counter
Increment counter by 2
Print counter
Add 3 to counter
Print counter
Increment the counter
Print counter

# Arithmetic operations
Set number1 to 10
Set number2 to 5
Add number1 and number2 to create sum_result
Print sum_result

Multiply number1 by number2 to get product_result
Print product_result

Subtract number2 from number1 to find difference
Print difference

Divide number1 by number2 to calculate quotient
Print quotient

# Conditional logic
Set age to 21
If age is greater than 18:
    Print 'You are an adult'
Else:
    Print 'You are a minor'
End if

# More complex variable assignment
Set message to "The total is: " + total
Print message
"""

def run_enhanced_tests():
    """Run tests on the enhanced NLP capabilities"""
    print("=== Testing Enhanced NLP Capabilities ===")
    print("\nInput Program:")
    print(test_program)
            "Set b to 3",
            "Set c to a plus b",
            "Set d to a times b",
            "Print c",
            "Print d",
            "Set message to 'Value: ' + c",
            "Print message"
        ]
    }
    
    # Test each category
    for category, lines in test_cases.items():
        print(f"\n=== Testing {category} ===")
        
        # Create a test file for this category
        with tempfile.NamedTemporaryFile(mode='w', suffix='.nl', delete=False) as f:
            input_file = f.name
            for line in lines:
                f.write(line + "\n")
                
        output_file = input_file.replace('.nl', '.nlc')
        
        # Compile the test file
        compiler = NLPEnhancedCompiler()
        print("Compiling...")
        compiler.compile(input_file, output_file)
        
        # Display the bytecode
        print("\nGenerated Bytecode:")
        with open(output_file, 'r') as f:
            bytecode = f.readlines()
            for i, line in enumerate(bytecode):
                print(f"  {i+1}: {line.strip()}")
        
        # Execute the bytecode
        print("\nExecution Output:")
        vm = EnhancedNLVM()
        
        # Capture output
        original_stdout = sys.stdout
        output_buffer = io.StringIO()
        sys.stdout = output_buffer
        
        vm.execute(output_file)
        
        # Restore stdout and get output
        sys.stdout = original_stdout
        output = output_buffer.getvalue()
        
        print(output)
        
        # Clean up temporary files
        os.unlink(input_file)
        os.unlink(output_file)

if __name__ == "__main__":
    test_enhanced_nlp()
