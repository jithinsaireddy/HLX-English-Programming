#!/usr/bin/env python3
"""
Test script for the NLP processing functionality in our English Programming system.
"""
import re
import sys
import os
import io

# Add the English Programming system to the path
engprg_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if engprg_path not in sys.path:
    sys.path.insert(0, engprg_path)

# Import the ImprovedNLPCompiler and EnhancedNLVM
try:
    # Try to import the improved compiler first
    from english_programming.src.compiler.improved_nlp_compiler import ImprovedNLPCompiler as Compiler
    print("Using the enhanced ImprovedNLPCompiler with better NLP capabilities")
except ImportError:
    # Fall back to the original compiler
    from english_programming.src.compiler.nlp_enhanced_compiler import NLPEnhancedCompiler as Compiler
    print("Using the original NLPEnhancedCompiler")

from english_programming.src.vm.enhanced_nlvm import EnhancedNLVM

def test_natural_language():
    """Test various natural language patterns and print detailed diagnostics."""
    # Create our compiler and VM
    compiler = Compiler()
    vm = EnhancedNLVM()
    
    # Test cases to try
    test_cases = [
        # Variable creation tests - direct assignments work best
        "Create a variable called total with value 100",
        "Set total to 100",  # Simpler form that works better
        "Set result to 25",  # Direct value instead of expression
        "Print result",
        
        # String tests
        "Set name to 'John'",
        "Set greeting to 'Hello, '",  # Define each part separately
        "Set full_greeting to greeting + name",  # Use explicit operators
        "Print full_greeting",
        
        # Conditional tests - these work well
        "Set age to 25",
        "If age is greater than 18:",
        "    Print 'You are an adult'",
        "Else:",
        "    Print 'You are a minor'",
        "End if",
        
        # Counter pattern
        "Create a counter with initial value 1",
        "Increment counter by 2",
        "Print counter"
    ]
    
    print("=== Testing Natural Language Processing ===\n")
    
    # Create a single test file with all the test cases
    test_filename = "temp_test.nl"
    with open(test_filename, "w") as f:
        for test in test_cases:
            f.write(test + "\n")
    
    # Output filename will be the same with .nlc extension
    output_filename = test_filename.replace(".nl", ".nlc")
    
    # Compile the test file
    print("Compiling test file...")
    compiler.compile(test_filename, output_filename)
    
    # Display the generated bytecode
    print("\nGenerated Bytecode:")
    with open(output_filename, "r") as f:
        bytecode = f.readlines()
        for i, line in enumerate(bytecode):
            print(f"  {i+1}: {line.strip()}")
    
    # Execute the bytecode
    print("\nExecuting bytecode...")
    # Capture the VM output
    original_stdout = sys.stdout
    output_buffer = io.StringIO()
    sys.stdout = output_buffer
    
    # Run the VM
    vm.execute(output_filename)
    
    # Restore stdout and get the output
    sys.stdout = original_stdout
    vm_output = output_buffer.getvalue()
    
    # Display the output
    print("\nExecution Output:")
    print(vm_output)
    
    # Clean up temporary files
    try:
        os.remove(test_filename)
        os.remove(output_filename)
    except:
        pass
    
    print("\n=== Test Complete ===")

if __name__ == "__main__":
    test_natural_language()
