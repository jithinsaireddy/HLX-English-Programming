#!/usr/bin/env python3
"""
Integrated Extension Test for English Programming

This script tests the complete integration of our extensions with the English
Programming system. It demonstrates:

1. Advanced control flow (while loops, for-each loops)
2. OOP features (classes, methods, inheritance)
3. Module system for code organization

The test ensures that the extensions work correctly with the fixed conditional 
logic implementation mentioned in the memories.
"""

import os
import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).absolute().parent
sys.path.append(str(project_root))

# Import extension components
from english_programming.src.compiler.improved_nlp_compiler import ImprovedNLPCompiler
from english_programming.src.vm.improved_nlvm import ImprovedNLVM
from english_programming.src.extensions.vm_extension_adapter import VMExtensionAdapter
from english_programming.src.extensions.compiler_extension import EnglishCompilerExtension

class EnglishExtensionTester:
    """
    Tester for the English Programming extensions
    
    This class integrates and tests the compiler and VM extensions to ensure
    they work correctly with the fixed conditional logic implementation.
    """
    
    def __init__(self, debug=True):
        """Initialize the tester"""
        self.debug = debug
        
        # Create the test directory
        self.test_dir = project_root / "test_output"
        os.makedirs(self.test_dir, exist_ok=True)
        
        # Initialize the compiler with extensions
        self.compiler = ImprovedNLPCompiler()
        self.compiler_extension = EnglishCompilerExtension(self.compiler, debug=debug)
        
        # Initialize the VM with extensions
        self.vm = ImprovedNLVM(debug=debug)
        self.vm_extension = VMExtensionAdapter(self.vm, debug=debug)
        
        if self.debug:
            print("English Extension Tester initialized")
    
    def create_test_program(self, test_name, english_code):
        """
        Create a test English program
        
        Args:
            test_name (str): Name for the test
            english_code (str): English code
            
        Returns:
            Path: Path to the program file
        """
        program_file = self.test_dir / f"{test_name}.nl"
        
        with open(program_file, "w") as f:
            f.write(english_code)
        
        print(f"Created test program: {program_file}")
        return program_file
    
    def compile_program(self, program_file):
        """
        Compile an English program to bytecode
        
        Args:
            program_file (Path): Path to program file
            
        Returns:
            Path: Path to bytecode file
        """
        bytecode_file = program_file.with_suffix(".nlc")
        
        print(f"Compiling {program_file}...")
        
        with open(program_file, "r") as f:
            lines = [line.strip() for line in f.readlines()]
        
        # Use our extended compiler to translate the English code
        bytecode = self.compiler_extension.extended_translate(lines)
        
        with open(bytecode_file, "w") as f:
            for line in bytecode:
                f.write(line + "\n")
        
        print(f"Compiled to: {bytecode_file}")
        
        if self.debug:
            print("Generated bytecode:")
            for line in bytecode:
                print(f"  {line}")
        
        return bytecode_file
    
    def run_program(self, bytecode_file):
        """
        Run a compiled English program
        
        Args:
            bytecode_file (Path): Path to bytecode file
            
        Returns:
            Any: Result of execution
        """
        print(f"\nRunning program: {bytecode_file}")
        print("=" * 60)
        
        # Execute the program with our extended VM
        result = self.vm_extension.extended_execute(bytecode_file)
        
        print("=" * 60)
        print("Program executed successfully!")
        
        # Show final environment
        print("\nFinal environment variables:")
        print("-" * 40)
        
        for var_name, value in self.vm.env.items():
            if not var_name.startswith("_") and not var_name.startswith("#"):
                print(f"{var_name} = {value}")
        
        return result
    
    def clean_up(self, files):
        """Clean up test files"""
        if self.debug:
            print("\nTest files preserved for inspection")
            return
        
        print("\nCleaning up test files...")
        for file in files:
            if os.path.exists(file):
                os.remove(file)
                print(f"Removed: {file}")
    
    def run_test(self, test_name, english_code):
        """
        Run a complete test
        
        Args:
            test_name (str): Name for the test
            english_code (str): English code to test
            
        Returns:
            bool: True if successful, False otherwise
        """
        print("=" * 60)
        print(f"ENGLISH EXTENSION TEST: {test_name.upper()}")
        print("=" * 60)
        
        try:
            # Create program
            program_file = self.create_test_program(test_name, english_code)
            
            # Compile program
            bytecode_file = self.compile_program(program_file)
            
            # Run program
            result = self.run_program(bytecode_file)
            
            # Clean up
            self.clean_up([program_file, bytecode_file])
            
            print(f"\n{test_name.capitalize()} test completed successfully!")
            return True
        
        except Exception as e:
            print(f"Error during test: {str(e)}")
            import traceback
            traceback.print_exc()
            return False
    
    def test_conditional_logic(self):
        """Test the fixed conditional logic implementation"""
        english_code = """
# Conditional Logic Test
# This tests the fixed conditional logic implementation

create a variable called age and set it to 20
print "Testing conditional logic with age = 20"

# First test - if/else with true condition
if age is greater than 18:
    print "You are an adult (this should print)"
else:
    print "You are a minor (this should NOT print)"

# Second test - if/else with false condition 
if age is less than 18:
    print "This should NOT print"
else:
    print "This should print"

# Test completed
print "Conditional logic test complete."
"""
        return self.run_test("conditional_logic", english_code)
    
    def test_while_loop(self):
        """Test while loop implementation"""
        english_code = """
# While Loop Test
# This tests our while loop extension

create a variable called counter and set it to 1
create a variable called sum and set it to 0
print "Testing while loop with counter from 1 to 5"

while counter is less than or equal to 5:
    print counter
    add counter to sum and store the result in sum
    add 1 to counter and store the result in counter

print "Final sum is:"
print sum

# Test completed
print "While loop test complete."
"""
        return self.run_test("while_loop", english_code)
    
    def test_for_each_loop(self):
        """Test for-each loop implementation"""
        english_code = """
# For-Each Loop Test
# This tests our for-each loop extension

create a variable called fruits and set it to ["apple", "banana", "cherry"]
print "Testing for-each loop with fruits list"

for each fruit in fruits:
    print "Current fruit:"
    print fruit

# Test completed
print "For-each loop test complete."
"""
        return self.run_test("for_each_loop", english_code)
    
    def test_oop_features(self):
        """Test OOP features"""
        english_code = """
# OOP Features Test
# This tests our class, method, and object extensions

create class Person:
    define method constructor with parameters name and age:
        set self.name to name
        set self.age to age
    
    define method greet:
        print "Hello, my name is"
        print self.name
        print "and I am"
        print self.age
        print "years old"

# Create object and call method
create a Person object called john with parameters "John Doe" and 30
call the greet method on john

# Test completed
print "OOP features test complete."
"""
        return self.run_test("oop_features", english_code)
    
    def run_comprehensive_test(self):
        """Run a comprehensive test with all features"""
        english_code = """
# Comprehensive English Programming Extensions Test
# This tests all extension features working together

# Variable initialization
create a variable called counter and set it to 1
create a variable called sum and set it to 0

# While loop demonstration
print "Testing while loop:"
while counter is less than 6:
    print "Counter is"
    print counter
    add counter to sum and store the result in sum
    add 1 to counter and store the result in counter

print "Sum of numbers 1 to 5:"
print sum

# For-each loop demonstration
print "Testing for-each loop:"
create a variable called fruits and set it to ["apple", "banana", "cherry"]
for each fruit in fruits:
    print "Current fruit:"
    print fruit

# Conditional logic with if/else-if
create a variable called score and set it to 85
print "Testing if/else-if with score = 85:"

if score is greater than 90:
    print "Grade: A"
else if score is greater than 80:
    print "Grade: B"
else if score is greater than 70:
    print "Grade: C"
else:
    print "Grade: D"

# Class definition
create class Person:
    define method constructor with parameters name and age:
        set self.name to name
        set self.age to age
    
    define method greet:
        print "Hello, my name is"
        print self.name
        print "and I am"
        print self.age
        print "years old."

# Object creation and method call
print "Testing OOP features:"
create a Person object called john with parameters "John Doe" and 30
call the greet method on john

# Testing complete
print "All tests completed successfully!"
"""
        return self.run_test("comprehensive", english_code)
    
    def run_all_tests(self):
        """Run all extension tests"""
        results = {
            "conditional_logic": self.test_conditional_logic(),
            "while_loop": self.test_while_loop(),
            "for_each_loop": self.test_for_each_loop(),
            "oop_features": self.test_oop_features()
        }
        
        print("\n\n" + "=" * 60)
        print("ENGLISH PROGRAMMING EXTENSIONS - TEST SUMMARY")
        print("=" * 60)
        
        all_passed = True
        for test_name, success in results.items():
            status = "PASSED" if success else "FAILED"
            print(f"{test_name.ljust(20)}: {status}")
            if not success:
                all_passed = False
        
        if all_passed:
            print("\nAll individual tests passed!")
            print("\nRunning comprehensive test with all features...")
            comprehensive_result = self.run_comprehensive_test()
            
            if comprehensive_result:
                print("\nComprehensive test PASSED!")
                print("\nAll tests completed successfully!")
            else:
                print("\nComprehensive test FAILED!")
                print("Check the output for details.")
        else:
            print("\nSome tests failed. Check the output for details.")

# Main function
def main():
    print("\nEnglish Programming Extensions - Integrated Test\n")
    tester = EnglishExtensionTester(debug=True)
    tester.run_all_tests()

if __name__ == "__main__":
    main()
